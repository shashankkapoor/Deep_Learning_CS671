# -*- coding: utf-8 -*-
"""Task6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nT9mX0SEu_viwULSjT03zFedLRfF3Grg
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import pickle
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from keras.models import Model
from tensorflow.keras import layers
from tensorflow.keras.optimizers import Adam, SGD, Adagrad, RMSprop
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard

"""## Dataset"""

with open('/content/drive/MyDrive/Deep_learning/Group_9_Assgnment3/x_train.pkl', 'rb') as f:
    x_train = pickle.load(f)
with open('/content/drive/MyDrive/Deep_learning/Group_9_Assgnment3/y_train.pkl', 'rb') as f:
    y_train = pickle.load(f)

with open('/content/drive/MyDrive/Deep_learning/Group_9_Assgnment3/x_test.pkl', 'rb') as f:
    x_test = pickle.load(f)
with open('/content/drive/MyDrive/Deep_learning/Group_9_Assgnment3/y_test.pkl', 'rb') as f:
    y_test = pickle.load(f)

with open('/content/drive/MyDrive/Deep_learning/Group_9_Assgnment3/x_val.pkl', 'rb') as f:
    x_val = pickle.load(f)
with open('/content/drive/MyDrive/Deep_learning/Group_9_Assgnment3/y_val.pkl', 'rb') as f:
    y_val = pickle.load(f)

def relabel(data):
  class_labels = np.array(data)
  label_map = {label: i for i, label in enumerate(np.unique(class_labels))}
  integer_labels = np.array([label_map[label] for label in class_labels])
  print(label_map)
  return integer_labels.tolist()

y_train=relabel(y_train)
y_test=relabel(y_test)
y_val=relabel(y_val)

x_train = np.array(x_train).reshape(-1, 784)
x_test = np.array(x_test).reshape(-1, 784)
x_val = np.array(x_val).reshape(-1, 784)

x_train = x_train.tolist()
x_test = x_test.tolist()
x_val = x_val.tolist()

"""#### 1-hidden Layer Autoencoder"""

model = keras.models.load_model('/content/drive/MyDrive/Deep_learning/Group_9_Assignment4/40_Classification_Architecture/64components_512_256_128_model.h5')
model.summary()

max_activations = np.zeros((weights.shape[1], 28, 28))
for i in range(weights.shape[1]):
    activations = np.dot(x_train, weights[:, i])
    max_activation_idx = np.argmax(activations)
    max_activations[i] = x_train[max_activation_idx]

# Plot the pixel values that maximally activate each hidden neuron
fig, axs = plt.subplots(8, 8, figsize=(16, 16))
for i in range(weights.shape[1]):
    row = i // 8
    col = i % 8
    axs[row][col].imshow(max_activations[i], cmap='gray')
    axs[row][col].axis('off')
plt.show()

"""#### 20% Autoencoder Weights"""

model = keras.models.load_model('/content/drive/MyDrive/Deep_learning/Group_9_Assignment4/40_Classification_Architecture/64components_512_256_128_model.h5')
max_activations = np.zeros((weights.shape[1], 28, 28))
for i in range(weights.shape[1]):
    activations = np.dot(x_train, weights[:, i])
    max_activation_idx = np.argmax(activations)
    max_activations[i] = x_train[max_activation_idx]

# Plot the pixel values that maximally activate each hidden neuron
fig, axs = plt.subplots(8, 8, figsize=(16, 16))
for i in range(weights.shape[1]):
    row = i // 8
    col = i % 8
    axs[row][col].imshow(max_activations[i], cmap='gray')
    axs[row][col].axis('off')
plt.show()

"""#### 40% Autoencoder Weights"""

model = keras.models.load_model('/content/drive/MyDrive/Deep_learning/Group_9_Assignment4/40_Classification_Architecture/64components_512_256_128_model.h5')
max_activations = np.zeros((weights.shape[1], 28, 28))
for i in range(weights.shape[1]):
    activations = np.dot(x_train, weights[:, i])
    max_activation_idx = np.argmax(activations)
    max_activations[i] = x_train[max_activation_idx]

# Plot the pixel values that maximally activate each hidden neuron
fig, axs = plt.subplots(8, 8, figsize=(16, 16))
for i in range(weights.shape[1]):
    row = i // 8
    col = i % 8
    axs[row][col].imshow(max_activations[i], cmap='gray')
    axs[row][col].axis('off')
plt.show()